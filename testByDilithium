import unittest
import os
from dilithium import Dilithium2, Dilithium3, Dilithium5
from aes256_ctr_drbg import AES256_CTR_DRBG

def parse_kat_data(data):
    # Помощна функция за анализиране на данни от KAT файл в байтове
    parsed_data = {}
    count_blocks = data.split('\n\n')
    for block in count_blocks[1:-1]:
        block_data = block.split('\n')
        count, seed, mlen, msg, pk, sk, smlen, sm = [line.split(" = ")[-1] for line in block_data]
        parsed_data[count] = {
            "seed": bytes.fromhex(seed),
            "msg": bytes.fromhex(msg),
            "mlen": int(mlen),
            "pk": bytes.fromhex(pk),
            "sk": bytes.fromhex(sk),
            "sm": bytes.fromhex(sm),
        }
    return parsed_data

class TestDilithium(unittest.TestCase):
   # Тестване на Dilithium за вътрешна последователност, чрез генериране на подписи и проверката им
    
    def generic_test_dilithium(self, Dilithium):
        msg = b"Signed by dilithium" + os.urandom(16)
        
        # Изпълнение на процеса на подписване
        pk, sk = Dilithium.keygen()
        sig = Dilithium.sign(sk, msg)
        check_verify = Dilithium.verify(pk, msg, sig)
        
        # Генериране на някои неуспешни случаи
        pk_bad, _ = Dilithium.keygen()
        check_wrong_pk  = Dilithium.verify(pk_bad, msg, sig)
        check_wrong_msg = Dilithium.verify(pk, b"", sig)
        
        # Проверка на подписа дали работи
        self.assertTrue(check_verify)
        # Проверка на промяната на ключовете
        self.assertFalse(check_wrong_pk)
        # Проверка на промяната на съобщенията
        self.assertFalse(check_wrong_msg)
        
    def test_dilithium2(self):
        for _ in range(5):
            self.generic_test_dilithium(Dilithium2)
    
    def test_dilithium3(self):
        for _ in range(5):
            self.generic_test_dilithium(Dilithium3)
            
    def test_dilithium5(self):
        for _ in range(5):
            self.generic_test_dilithium(Dilithium5)
            
class TestDilithiumDRBG(unittest.TestCase):
    
    def generic_test_dilithium(self, Dilithium):
        # Първо генерираме пет pk,sk двойки от същия seed и проверяваме дали всички са еднакви

        seed = os.urandom(48)
        pk_output = []
        for _ in range(5):
            Dilithium.set_drbg_seed(seed)
            pk, sk = Dilithium.keygen()
            pk_output.append(pk + sk)
        self.assertEqual(len(pk_output), 5)
        self.assertEqual(len(set(pk_output)), 1)
            
        # След като имате фиксирана двойка ключове, трябва да проверим дали всички подписи са еднакви
        # и че всички те проверяват правилно

        sig_output = []
        seed = os.urandom(48)
        msg  = b"Signed by Dilithium" + os.urandom(32)
        pk, sk = Dilithium.keygen()
        for _ in range(5):
            Dilithium.set_drbg_seed(seed)
            sig = Dilithium.sign(sk, msg)
            verify = Dilithium.verify(pk, msg, sig)
            # Проверката на подписа дали работи
            self.assertTrue(verify)
            sig_output.append(sig)
            
        # Проверка дали и петте подписа са еднакви
        self.assertEqual(len(sig_output), 5)
        self.assertEqual(len(set(sig_output)), 1)
        
    def test_dilithium2(self):
        for _ in range(5):
            self.generic_test_dilithium(Dilithium2)
    
    def test_dilithium3(self):
        for _ in range(5):
            self.generic_test_dilithium(Dilithium3)
            
    def test_dilithium5(self):
        for _ in range(5):
            self.generic_test_dilithium(Dilithium5)

class TestKnownTestValuesDRBG(unittest.TestCase):
    """
    Ние знаем как са семената и посланията за KAT
    генерирани, така че нека сравним нашата собствена реализация.

    Трябва да тестваме само един файл, тъй като семената са
    същото в трите файла.
    """
    def test_known_answer_DRBG(self):
        # Задайте DRBG за генериране на семена
        entropy_input = bytes([i for i in range(48)])
        rng = AES256_CTR_DRBG(entropy_input)
        
        with open("assets/PQCsignKAT_Dilithium2.rsp") as f:
            # Извличане на данни от KAT
            kat_data = f.read()
            parsed_data = parse_kat_data(kat_data)

        # Проверка за съвпадането на всички семена
        for data in parsed_data.values():
            seed = data["seed"]
            seed_check = rng.random_bytes(48)
            msg_len = data["mlen"]
            msg = data["msg"]
            msg_check = rng.random_bytes(msg_len)
            self.assertEqual(seed, seed_check)
            self.assertEqual(msg,  msg_check)

class TestKnownTestValuesDilithium(unittest.TestCase):
    def generic_test_dilithium(self, Dilithium, file_name):
        with open(f"assets/{file_name}") as f:
            # Извличане на данни от KAT
            kat_data = f.read()
            parsed_data = parse_kat_data(kat_data)

        failure = 0
        for data in parsed_data.values():
            seed_KAT = data["seed"]
            pk_KAT = data["pk"]
            sk_KAT = data["sk"]
            
            Dilithium.set_drbg_seed(seed_KAT)
            pk, sk = Dilithium.keygen()
            # Проверка дали keygen съвпада
            self.assertEqual(pk_KAT, pk)
            self.assertEqual(sk_KAT, sk)
            
            # Проверка дали подписът съвпада
            msg = data["msg"]
            msg_len = data["mlen"]
            sm_KAT  = data["sm"]
            sig_KAT = sm_KAT[:-msg_len]
            
            # sm_KAT има съобщение като последните mlen байта
            self.assertEqual(msg, sm_KAT[-msg_len:])
            
            # Провеяваме дали генерираният подпис съвпада с
            # този, извлечен от KAT
            sig = Dilithium.sign(sk, msg)
            self.assertEqual(sig, sig_KAT)

            # Накрая проверяваме дали подписът е
            # валиден за съобщението
            verify_KAT = Dilithium.verify(pk, msg, sig)
            self.assertTrue(verify_KAT)
            
            

    def test_dilithium2(self):
        self.generic_test_dilithium(Dilithium2, "PQCsignKAT_Dilithium2.rsp")
        
    # def test_dilithium3(self):
    #     self.generic_test_dilithium(Dilithium3, "PQCsignKAT_Dilithium3.rsp")
        
    # def test_dilithium5(self):
    #     self.generic_test_dilithium(Dilithium5, "PQCsignKAT_Dilithium5.rsp")
    
if __name__ == '__main__':
    unittest.main()
    
